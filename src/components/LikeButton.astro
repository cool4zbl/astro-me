---
// src/components/LikeButton.astro
export interface Props {
  slug: string;
}

const { slug } = Astro.props;
const API_URL = import.meta.env.PROD ? 'https://binliuzhang.com' : 'http://localhost:8080';
const API_ENDPOINT = `${API_URL}/v1/likes/${slug}`;

---

<div class="like-container" data-slug={slug}>
  <button class="like-button" aria-label="Like this post" title="Send some love">ðŸ’–</button>
  <span class="like-count">Loading...</span>
</div>

<script define:vars={{ API_ENDPOINT, slug }}>
  // This code runs in the browser
  const MAX_LIKES_PER_USER = 20;

  document.querySelectorAll('.like-container').forEach(container => {
    const slug = container.dataset.slug;
    const button = container.querySelector('.like-button');
    const countSpan = container.querySelector('.like-count');
    const userLikeKey = `like-count-${slug}`;
    const userIdemKey = `like-idem-${slug}`;

    const storedLikes = parseInt(localStorage.getItem(userLikeKey) || '0', 10);
    let userLikes = Number.isNaN(storedLikes) ? 0 : storedLikes;

    const updateButtonState = () => {
      if (userLikes >= MAX_LIKES_PER_USER) {
        button.disabled = true;
        button.setAttribute('aria-disabled', 'true');
        button.title = `You've reached the maximum of ${MAX_LIKES_PER_USER} likes.`;
      } else {
        button.disabled = false;
        button.removeAttribute('aria-disabled');
        button.title = 'Send some love';
      }
    };

    updateButtonState();

    // 1. Fetch the initial like count when the page loads
    async function getInitialLikes() {
      try {
        const response = await fetch(`${API_ENDPOINT}`);
        if (!response.ok) {
          throw new Error(`Request failed with status ${response.status}`);
        }
        const data = await response.json();
        countSpan.textContent = data.likes;
      } catch (error) {
        console.error('Failed to fetch likes:', error);
        countSpan.textContent = '0';
      }
    }

    // 2. Add a click event listener to the button
    button.addEventListener('click', async () => {
      if (userLikes >= MAX_LIKES_PER_USER) {
        button.classList.add('shake');
        setTimeout(() => button.classList.remove('shake'), 400);
        return;
      }

      try {
        button.classList.add('liked');
        setTimeout(() => button.classList.remove('liked'), 400);

        const idem = localStorage.getItem(userIdemKey) || crypto.randomUUID();
        localStorage.setItem(userIdemKey, idem);

        const response = await fetch(`${API_ENDPOINT}`, {
          method: 'POST',
          headers: {
            'Idempotency-Key': idem,
          }
        });
        if (!response.ok) {
          throw new Error(`Request failed with status ${response.status}`);
        }
        const data = await response.json();
        countSpan.textContent = data.likes;

        userLikes += 1;
        localStorage.setItem(userLikeKey, String(userLikes));
        updateButtonState();
      } catch (error) {
        console.error('Failed to add like:', error);
        button.classList.remove('liked');
      }
    });

    // Load the likes when the component is ready
    getInitialLikes();
  });
</script>

<style>
  .like-container {
    display: flex;
    align-items: center;
    justify-content: flex-end;
    gap: 12px;
    width: 100%;
  }

  .like-button {
    cursor: pointer;
    border: none;
    background: radial-gradient(circle at top left, #ff9fd4, #ff5c9a 60%, #ff2d75);
    color: #fff;
    width: 3.5rem;
    height: 3.5rem;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.75rem;
    box-shadow: 0 12px 24px rgba(255, 92, 154, 0.35);
    transition: transform 0.25s ease, box-shadow 0.25s ease;
    position: relative;
  }

  .like-button:hover:not(:disabled) {
    transform: translateY(-3px) scale(1.05);
    box-shadow: 0 16px 28px rgba(255, 92, 154, 0.45);
  }

  .like-button:active:not(:disabled) {
    transform: scale(0.95);
  }

  .like-button:disabled,
  .like-button[aria-disabled='true'] {
    cursor: not-allowed;
    background: #f4b7d1;
    box-shadow: none;
    opacity: 0.65;
  }

  .like-button.liked {
    animation: heart-pop 0.4s ease;
  }

  .like-button.shake {
    animation: shake 0.4s ease;
  }

  .like-count {
    font-weight: 600;
    color: var(--theme-text, #ff2d75);
    font-size: 1.1rem;
  }

  @keyframes heart-pop {
    0% {
      transform: scale(1);
    }
    50% {
      transform: scale(1.3);
    }
    100% {
      transform: scale(1);
    }
  }

  @keyframes shake {
    0%, 100% {
      transform: translateX(0);
    }
    25% {
      transform: translateX(-4px);
    }
    75% {
      transform: translateX(4px);
    }
  }
</style>
