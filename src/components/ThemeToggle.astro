<button
  id="theme-toggle"
  type="button"
  class="inline-flex h-9 w-9 items-center justify-center rounded-md border border-input bg-background text-sm font-medium ring-offset-background transition-colors hover:bg-accent hover:text-accent-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2"
  aria-label="toggle theme"
  title="toggle theme"
>
  <!-- light mode -->
  <svg
    id="sun-icon"
    class="h-4 w-4 rotate-0 scale-100 transition-all duration-200 dark:-rotate-90 dark:scale-0"
    fill="none"
    viewBox="0 0 24 24"
    stroke="currentColor"
    stroke-width="2"
  >
    <circle cx="12" cy="12" r="5"></circle>
    <line x1="12" y1="1" x2="12" y2="3"></line>
    <line x1="12" y1="21" x2="12" y2="23"></line>
    <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
    <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
    <line x1="1" y1="12" x2="3" y2="12"></line>
    <line x1="21" y1="12" x2="23" y2="12"></line>
    <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
    <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
  </svg>

  <!-- dark mode -->
  <svg
    id="moon-icon"
    class="absolute h-4 w-4 rotate-90 scale-0 transition-all duration-200 dark:rotate-0 dark:scale-100"
    fill="none"
    viewBox="0 0 24 24"
    stroke="currentColor"
    stroke-width="2"
  >
    <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
  </svg>
</button>

<script>
  class ThemeManager {
    private button: HTMLButtonElement | null;

    constructor() {
      this.button = document.getElementById('theme-toggle') as HTMLButtonElement;
      this.init();
    }

    init() {
      this.button?.addEventListener('click', () => this.toggleTheme());

      // 监听系统主题变化
      if (window.matchMedia) {
        const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
        mediaQuery.addEventListener('change', (e) => {
          if (!localStorage.getItem('theme')) {
            this.setTheme(e.matches ? 'dark' : 'light');
          }
        });
      }

      // 监听键盘快捷键 (Ctrl/Cmd + Shift + L)
      document.addEventListener('keydown', (e) => {
        if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'L') {
          e.preventDefault();
          this.toggleTheme();
        }
      });
    }

    getCurrentTheme() {
      return document.documentElement.classList.contains('dark') ? 'dark' : 'light';
    }

    setTheme(theme) {
      const isDark = theme === 'dark';
      document.documentElement.classList.toggle('dark', isDark);

      // 保存到 localStorage
      if (typeof localStorage !== 'undefined') {
        localStorage.setItem('theme', theme);
      }

      // 触发自定义事件
      window.dispatchEvent(new CustomEvent('themechange', {
        detail: { theme }
      }));
    }

    toggleTheme() {
      const currentTheme = this.getCurrentTheme();
      const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
      this.setTheme(newTheme);

      // 添加按钮点击动画
      this.button?.classList.add('animate-pulse');
      setTimeout(() => {
        this.button?.classList.remove('animate-pulse');
      }, 200);
    }

    getSystemTheme() {
      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        return 'dark';
      }
      return 'light';
    }
  }

  // 初始化主题管理器
  document.addEventListener('DOMContentLoaded', () => {
    new ThemeManager();
  });
</script>

<style>
  /* 按钮悬停效果 */
  #theme-toggle:hover {
    transform: scale(1.05);
  }

  /* 图标过渡动画 */
  #theme-toggle svg {
    transition: all 0.2s ease-in-out;
  }

  /* 脉冲动画 */
  .animate-pulse {
    animation: pulse 0.2s ease-in-out;
  }

  @keyframes pulse {
    0%, 100% {
      transform: scale(1);
    }
    50% {
      transform: scale(1.1);
    }
  }
</style>
