---
const { headings, lang = 'zh' } = Astro.props;

// 过滤出h2和h3标题
const tocHeadings = headings.filter(h => h.depth <= 3);

const texts = {
  zh: {
    title: '目录'
  },
  en: {
    title: 'Table of Contents'
  }
};

const t = texts[lang];
---

{tocHeadings.length > 0 && (
  <div class="sticky top-8 bg-card border rounded-xl p-6 shadow-sm">
    <h3 class="text-lg font-semibold text-card-foreground mb-4 flex items-center">
      <svg class="mr-2 h-5 w-5 text-primary" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16" />
      </svg>
      {t.title}
    </h3>
    <nav class="space-y-2">
      {tocHeadings.map((heading) => (
        <a
          href={`#${heading.slug}`}
          class={`block text-sm transition-colors hover:text-primary ${
            heading.depth === 2 
              ? 'text-foreground font-medium' 
              : heading.depth === 3 
                ? 'text-muted-foreground pl-4' 
                : 'text-muted-foreground pl-8'
          }`}
        >
          {heading.text}
        </a>
      ))}
    </nav>
  </div>
)}

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const tocLinks = document.querySelectorAll('nav a[href^="#"]');
    const headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6');
    
    // 平滑滚动
    tocLinks.forEach(link => {
      link.addEventListener('click', function(e) {
        e.preventDefault();
        const targetId = this.getAttribute('href')?.substring(1);
        const targetElement = document.getElementById(targetId || '');
        if (targetElement) {
          targetElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
      });
    });
    
    // 滚动时高亮当前标题
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const id = entry.target.id;
          tocLinks.forEach(link => {
            link.classList.remove('text-primary', 'font-semibold');
            link.classList.add('text-muted-foreground');
            if (link.getAttribute('href') === `#${id}`) {
              link.classList.remove('text-muted-foreground');
              link.classList.add('text-primary', 'font-semibold');
            }
          });
        }
      });
    }, { rootMargin: '-20% 0% -80% 0%' });
    
    headings.forEach(heading => {
      if (heading.id) {
        observer.observe(heading);
      }
    });
  });
</script>
