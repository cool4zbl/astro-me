---
// Giscus comment component
// Enable Discussions in your GitHub repository before use
// Configure integration details at https://giscus.app

const { class: className } = Astro.props;
---

<div id="comments" class={`mt-8 ${className || ''}`}>
  <h3 class="mb-4 text-lg font-semibold text-foreground">Comments</h3>

  <!-- Giscus container -->
  <div id="giscus-container" class="giscus-container rounded-lg border bg-card p-4">
    <!-- Loading state -->
    <div id="giscus-loading" class="py-8 text-center">
      <div class="inline-block h-6 w-6 animate-spin rounded-full border-b-2 border-primary"></div>
      <p class="mt-2 text-sm text-muted-foreground">Loading comments...</p>
    </div>

    <!-- Configuration guidance -->
    <div id="giscus-config" class="py-8 text-center text-muted-foreground">
      <div class="mb-4">
        <svg class="mx-auto h-12 w-12 text-muted-foreground" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
        </svg>
      </div>
      <h4 class="mb-2 text-lg font-medium text-foreground">Configure Giscus comments</h4>
      <div class="mx-auto max-w-md space-y-2 text-sm">
        <p>To enable the comment widget, complete the following steps:</p>
        <ol class="mt-4 space-y-1 text-left">
          <li>1. Enable Discussions in your GitHub repository.</li>
          <li>
            2. Visit
            <a href="https://giscus.app" target="_blank" class="text-primary hover:underline">giscus.app</a>
            to generate the required settings.
          </li>
          <li>3. Update the configuration values below.</li>
        </ol>
      </div>
    </div>
  </div>
</div>

<script>
  // Giscus configuration - replace these placeholders with your repository details
  const GISCUS_CONFIG = {
    repo: 'your-username/your-repo', // GitHub repository
    repoId: 'your-repo-id', // Obtain from giscus.app
    category: 'General', // Discussion category
    categoryId: 'your-category-id', // Obtain from giscus.app
    mapping: 'pathname', // Mapping strategy
    strict: '0',
    reactionsEnabled: '1',
    emitMetadata: '0',
    inputPosition: 'bottom',
    lang: 'en',
    loading: 'lazy'
  };

  // Check whether all configuration values have been replaced
  function isConfigured() {
    return (
      GISCUS_CONFIG.repo !== 'your-username/your-repo' &&
      GISCUS_CONFIG.repoId !== 'your-repo-id' &&
      GISCUS_CONFIG.categoryId !== 'your-category-id'
    );
  }

  // Load the Giscus widget
  function loadGiscus() {
    const container = document.getElementById('giscus-container');
    const loading = document.getElementById('giscus-loading');
    const config = document.getElementById('giscus-config');

    if (!isConfigured()) {
      loading.style.display = 'none';
      config.style.display = 'block';
      return;
    }

    // Hide the configuration instructions
    config.style.display = 'none';

    // Create the Giscus script element
    const script = document.createElement('script');
    script.src = 'https://giscus.app/client.js';
    script.setAttribute('data-repo', GISCUS_CONFIG.repo);
    script.setAttribute('data-repo-id', GISCUS_CONFIG.repoId);
    script.setAttribute('data-category', GISCUS_CONFIG.category);
    script.setAttribute('data-category-id', GISCUS_CONFIG.categoryId);
    script.setAttribute('data-mapping', GISCUS_CONFIG.mapping);
    script.setAttribute('data-strict', GISCUS_CONFIG.strict);
    script.setAttribute('data-reactions-enabled', GISCUS_CONFIG.reactionsEnabled);
    script.setAttribute('data-emit-metadata', GISCUS_CONFIG.emitMetadata);
    script.setAttribute('data-input-position', GISCUS_CONFIG.inputPosition);
    script.setAttribute('data-theme', getGiscusTheme());
    script.setAttribute('data-lang', GISCUS_CONFIG.lang);
    script.setAttribute('data-loading', GISCUS_CONFIG.loading);
    script.crossOrigin = 'anonymous';
    script.async = true;

    // Listen for the script load event
    script.onload = () => {
      loading.style.display = 'none';
    };

    container.appendChild(script);
  }

  // Determine the current theme for Giscus
  function getGiscusTheme() {
    const isDark = document.documentElement.classList.contains('dark');
    return isDark ? 'dark' : 'light';
  }

  // Update the embedded Giscus theme
  function updateGiscusTheme() {
    const iframe = document.querySelector('iframe.giscus-frame');
    if (iframe) {
      const theme = getGiscusTheme();
      iframe.contentWindow.postMessage(
        { giscus: { setConfig: { theme } } },
        'https://giscus.app'
      );
    }
  }

  // Observe theme changes so the widget follows
  function observeThemeChange() {
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
          updateGiscusTheme();
        }
      });
    });

    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ['class']
    });
  }

  // Initialise the integration
  document.addEventListener('DOMContentLoaded', () => {
    loadGiscus();
    observeThemeChange();
  });
</script>

<style>
  .giscus-container {
    min-height: 200px;
  }

  /* Custom Giscus overrides */
  :global(.giscus-frame) {
    width: 100% !important;
  }

  /* Loading animation */
  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  .animate-spin {
    animation: spin 1s linear infinite;
  }
</style>
