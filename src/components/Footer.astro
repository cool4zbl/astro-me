---
import SocialLinks from "./SocialLinks.astro";
import Logo from "./Logo.astro";
import {
  getLangFromUrl,
  getTranslations,
  getLocalizedPath,
  ui,
} from "../i18n/config";
import { siteConfig } from "@/config";

const currentYear = new Date().getFullYear();
const lang = getLangFromUrl(Astro.url);
const t = getTranslations(lang);

const footerLinks = {
  navigation: [
    { key: "home", href: getLocalizedPath("/", lang) },
    { key: "blog", href: getLocalizedPath("/blog", lang) },
    { key: "projects", href: getLocalizedPath("/projects", lang) },
    { key: "experience", href: getLocalizedPath("/experience", lang) },
  ],
  resources: [
    {
      name: "RSS",
      href: "/rss.xml",
      external: true,
    },
    {
      name: "Sitemap",
      href: "/sitemap-index.xml",
      external: true,
    },
    {
      name: t("nav.tags"),
      href: getLocalizedPath("/tags", lang),
    },
    {
      name: t("nav.search"),
      href: getLocalizedPath("/search", lang),
    },
  ],
};

// TODO: move to i18n config
const mottoPool = [
  {
    en: "Stay hungry, stay foolish.",
    zh: "Stay hungry, stay foolish.",
  },
  {
    zh: "保持好奇，工具会更新，方法也会。",
    en: "Stay curious—tools evolve, so can your approach.",
  },
  {
    en: "Be useful. Be clear. Ship reliably.",
    zh: "做有用的事，清晰表达，可靠交付。",
  },
  {
    en: "Leap, and the net will appear.",
    zh: "Leap, and the net will appear.",
  },
  {
    en: "Simplicity is the ultimate sophistication.",
    zh: "简单是终极的复杂。",
  },
  {
    en: "less is more.",
    zh: "少即是多。",
  },
  {
    en: "Be curious, ship things, stay caffeinated.",
    zh: "Be curious, ship things, stay caffeinated.",
  },
  {
    en: "Always ask for the opportunity. Always ask if you want something. And when you’re offered an opportunity, always say yes. And then lastly, practise a growth mindset.",
    zh: "Always ask for the opportunity. Always ask if you want something. And when you’re offered an opportunity, always say yes. And then lastly, practise a growth mindset.",
  },

  {
    en: "Promise me you'll always remember: You're braver than you believe, and stronger than you seem, and smarter than you think.",
    zh: "Promise me you'll always remember: You're braver than you believe, and stronger than you seem, and smarter than you think.",
  },
];

const mottoTexts = mottoPool.map((item) => item[lang]);
const mottoId = `motto-${Math.random().toString(36).slice(2, 8)}`;
const initialMotto = mottoTexts[0];
---

<footer class="border-t bg-muted/30">
  <div class="container-width py-12">
    <div class="grid gap-8 md:grid-cols-2">
      <!-- Left Column: Logo and Motto -->
      <div>
        <div class="mb-4">
          <Logo lang={lang} variant="footer" />
        </div>

        <div class="mb-6">
          <p
            id={mottoId}
            data-mottos={JSON.stringify(mottoTexts)}
            class="text-sm leading-relaxed text-muted-foreground italic"
          >
            {initialMotto}
          </p>
        </div>

        <SocialLinks size="md" lang={lang} />
      </div>

      <!-- Right Column: Navigation and Resources -->
      <div class="grid gap-8 sm:grid-cols-2">
        <div>
          <h3
            class="mb-4 text-sm font-semibold text-foreground uppercase tracking-[0.2em]"
          >
            {t("footer.navigation")}
          </h3>
          <ul class="space-y-2 text-sm text-muted-foreground">
            {
              footerLinks.navigation.map((link) => (
                <li>
                  <a
                    href={link.href}
                    class="transition-colors hover:text-primary"
                  >
                    {t(`nav.${link.key}` as keyof typeof ui[typeof lang])}
                  </a>
                </li>
              ))
            }
          </ul>
        </div>

        <div>
          <h3
            class="mb-4 text-sm font-semibold text-foreground uppercase tracking-[0.2em]"
          >
            {t("footer.resources")}
          </h3>
          <ul class="space-y-2 text-sm text-muted-foreground">
            {
              footerLinks.resources.map((link) => (
                <li>
                  <a
                    href={link.href}
                    class="transition-colors hover:text-primary"
                    target={link.external ? "_blank" : undefined}
                    rel={link.external ? "noreferrer" : undefined}
                  >
                    {link.name}
                    {link.external && (
                      <svg
                        class="ml-1 inline h-3 w-3"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"
                        />
                      </svg>
                    )}
                  </a>
                </li>
              ))
            }
          </ul>
        </div>
      </div>
    </div>

    <div
      class="mt-8 border-t pt-6 text-xs text-muted-foreground sm:text-sm text-center"
    >
      &copy; {currentYear} {siteConfig.site.name}.
      {t("footer.poweredByAstro")}
    </div>
      <footer>
          <!-- Environment indicator (dev only) -->
          {siteConfig.env.isDev && (
              <div style="background: yellow; padding: 10px; color: black; text-align: center; margin-top: 10px; font-weight: bold;">
                  ⚠️ Development Mode - Site URL: {siteConfig.site.url}
              </div>
          )}
      </footer>
  </div>
  <script is:inline define:vars={{ mottoId }}>
    const mottoContainer = document.getElementById(mottoId);
    if (mottoContainer) {
      try {
        const mottos = JSON.parse(mottoContainer.dataset.mottos || "[]");
        if (Array.isArray(mottos) && mottos.length > 0) {
          const pick = mottos[Math.floor(Math.random() * mottos.length)];
          if (pick) {
            mottoContainer.textContent = pick;
          }
        }
      } catch (error) {
        console.warn("Failed to parse motto list", error);
      }
    }
  </script>
</footer>
