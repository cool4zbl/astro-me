---
import BaseLayout from '../layouts/BaseLayout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { getPageMetadata } from '../utils/metadata';

const { title: pageTitle, description: pageDescription } = getPageMetadata('search');
---

<BaseLayout title={pageTitle} description={pageDescription}>
  <Header />

  <main class="flex-1">
    <div class="container-width py-16">
      <div class="mx-auto max-w-2xl lg:max-w-4xl">
        <header class="text-center mb-16">
          <h1 class="text-3xl font-bold tracking-tight text-foreground sm:text-4xl">
            Search Articles
          </h1>
          <p class="mt-2 text-lg leading-8 text-muted-foreground">
            Enter keywords to search for related articles
          </p>
        </header>

        <!-- Search Box -->
        <div class="mb-8">
          <div class="relative">
            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <svg class="h-5 w-5 text-muted-foreground" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 01-14 0 7 7 0 0114 0z" />
              </svg>
            </div>
            <input
              type="text"
              id="search-input"
              placeholder="Search article titles, content, or tags..."
              class="block w-full pl-10 pr-3 py-3 border border-input rounded-md leading-5 bg-background text-foreground placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent"
            />
          </div>
        </div>

        <!-- Search Results -->
        <div id="search-results" class="hidden">
          <div class="mb-4">
            <p id="search-count" class="text-sm text-muted-foreground"></p>
          </div>
          <div id="results-container" class="space-y-6"></div>
        </div>

        <!-- No Results -->
        <div id="no-results" class="hidden text-center py-16">
          <div class="mx-auto h-12 w-12 text-muted-foreground mb-4">
            <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 0112 15c-2.34 0-4.47-.881-6.08-2.33" />
            </svg>
          </div>
          <h3 class="text-lg font-medium text-foreground mb-2">No articles found</h3>
          <p class="text-muted-foreground">Try using different keywords or browse all articles</p>
          <div class="mt-6">
            <a
              href="/blog"
              class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-primary-foreground bg-primary hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary"
            >
              Browse All Articles
            </a>
          </div>
        </div>

        <!-- Initial State -->
        <div id="initial-state" class="text-center py-16">
          <div class="mx-auto h-12 w-12 text-muted-foreground mb-4">
            <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 01-14 0 7 7 0 0114 0z" />
            </svg>
          </div>
          <h3 class="text-lg font-medium text-foreground mb-2">Start Searching</h3>
          <p class="text-muted-foreground">Enter keywords to search for related articles</p>
        </div>
      </div>
    </div>
  </main>

  <Footer />
</BaseLayout>

<script>
  import MiniSearch from 'minisearch';

  let miniSearch;
  let searchData = [];

  // Initialize search
  async function initSearch() {
    try {
      const response = await fetch('/search-data.json');
      searchData = await response.json();

      miniSearch = new MiniSearch({
        fields: ['title', 'description', 'content', 'tags'],
        storeFields: ['title', 'description', 'slug', 'publishedAt', 'tags'],
        searchOptions: {
          boost: { title: 2, tags: 1.5 },
          fuzzy: 0.2,
          prefix: true
        }
      });

      miniSearch.addAll(searchData);
    } catch (error) {
      console.error('Failed to initialize search:', error);
    }
  }

  // Execute search
  function performSearch(query) {
    if (!miniSearch || !query.trim()) {
      showInitialState();
      return;
    }

    const results = miniSearch.search(query, { limit: 20 });
    displayResults(results, query);
  }

  // Display search results
  function displayResults(results, query) {
    const searchResults = document.getElementById('search-results');
    const noResults = document.getElementById('no-results');
    const initialState = document.getElementById('initial-state');
    const searchCount = document.getElementById('search-count');
    const resultsContainer = document.getElementById('results-container');

    if (!searchResults || !noResults || !initialState || !searchCount || !resultsContainer) {
      console.warn('Search UI elements are missing.');
      return;
    }

    initialState.classList.add('hidden');

    if (results.length === 0) {
      searchResults.classList.add('hidden');
      noResults.classList.remove('hidden');
      return;
    }

    noResults.classList.add('hidden');
    searchResults.classList.remove('hidden');

    searchCount.textContent = `Found ${results.length} related articles`;

    resultsContainer.innerHTML = results.map(result => `
      <article class="border rounded-lg p-6 hover:bg-accent/50 transition-colors">
        <div class="flex items-start justify-between">
          <div class="flex-1">
            <h3 class="text-lg font-semibold text-foreground mb-2">
              <a href="/blog/${result.slug}/" class="hover:text-primary">
                ${highlightText(result.title, query)}
              </a>
            </h3>
            <p class="text-muted-foreground mb-3 line-clamp-2">
              ${highlightText(result.description, query)}
            </p>
            <div class="flex items-center gap-4 text-sm text-muted-foreground">
              <time>${formatDate(result.publishedAt)}</time>
              ${result.tags.length > 0 ? `
                <div class="flex gap-1">
                  ${result.tags.slice(0, 3).map(tag => `
                    <span class="inline-flex items-center rounded-full bg-secondary px-2 py-0.5 text-xs font-medium text-secondary-foreground">
                      ${tag}
                    </span>
                  `).join('')}
                </div>
              ` : ''}
            </div>
          </div>
        </div>
      </article>
    `).join('');
  }
  
  function showInitialState() {
    const searchResults = document.getElementById('search-results');
    const noResults = document.getElementById('no-results');
    const initialState = document.getElementById('initial-state');

    if (!searchResults || !noResults || !initialState) {
      return;
    }

    searchResults.classList.add('hidden');
    noResults.classList.add('hidden');
    initialState.classList.remove('hidden');
  }

  // Highlight search keywords
  function highlightText(text, query) {
    if (!query.trim()) return text;

    const regex = new RegExp(`(${query.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');
    return text.replace(regex, '<mark class="bg-yellow-200 dark:bg-yellow-800 px-1 rounded">$1</mark>');
  }

  // Format date
  function formatDate(dateString) {
    const date = new Date(dateString);
    return new Intl.DateTimeFormat('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    }).format(date);
  }

  // Debounce function
  function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }

  // Initialize
  document.addEventListener('DOMContentLoaded', () => {
    initSearch();

    const searchInput = document.getElementById('search-input');
    if (!(searchInput instanceof HTMLInputElement)) return;

    const debouncedSearch = debounce((query) => performSearch(query), 300);

    searchInput.addEventListener('input', (event) => {
      const target = event.target;
      if (!(target instanceof HTMLInputElement)) return;
      debouncedSearch(target.value);
    });

    // From URL parameters get search query
    const urlParams = new URLSearchParams(window.location.search);
    const query = urlParams.get('q');
    if (query) {
      searchInput.value = query;
      performSearch(query);
    }
  });
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
