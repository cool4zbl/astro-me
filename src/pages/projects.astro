---
import BaseLayout from '../layouts/BaseLayout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import OptimizedImage from '../components/OptimizedImage.astro';
import { getLangFromUrl, type Language } from '../i18n/config';

const lang: Language = Astro.props?.lang ?? getLangFromUrl(Astro.url);

const translations = {
  en: {
    hero: {
      prefix: 'My',
      highlight: 'Projects',
      suffix: '',
      description:
        'Case studies from food delivery, mobility, and fintech platforms where I led automation, data, and experimentation initiatives.',
    },
    featured: [
      {
        image: { src: '/placeholder.svg?height=400&width=600', alt: 'Workflow diagram for help experience orchestration' },
        badge: { label: 'Operational Excellence', class: 'bg-primary/10 text-primary' },
        title: 'Help Experience Orchestration Layer',
        subtitle: 'Just Eat Takeaway',
        description:
          'Event-driven automation powering JET’s help chatbot. The orchestration layer coordinates services, state, and playbooks so order issues resolve without manual intervention.',
        sections: [
          {
            title: 'Impact',
            items: [
              'Automated resolution flows for millions of annual customer contacts, reducing manual interventions by 60%.',
              'Improved stability and MTTR with resilient retries, stateful orchestration, and structured observability.',
            ],
          },
          {
            title: 'What I did',
            items: [
              'Owned architecture, API contracts, and rollout strategy across product, operations, and support teams.',
              'Partnered with ops to codify playbooks into reusable workflows, guardrails, and experimentable policies.',
            ],
          },
        ],
        stack: ['Java', 'Spring Boot', 'Kafka', 'AWS SQS', 'Redis'],
        actions: [
          { label: 'Experience Overview', variant: 'outline', href: '/experience' },
        ],
      },
      {
        image: { src: '/placeholder.svg?height=400&width=600', alt: 'Screenshot of JETMS operational console' },
        badge: { label: 'Platform Engineering', class: 'bg-accent/10 text-accent' },
        title: 'JETMS Operational Platform',
        subtitle: 'Just Eat Takeaway',
        description:
          'Multi-tenant workspace that unifies 20+ internal services for customer support agents. CQRS routing, shared data models, and fine-grained permissions keep teams focused on resolution outcomes.',
        sections: [
          {
            title: 'Impact',
            items: [
              'Reduced issue-resolution SLA by ~33% by consolidating fragmented tooling into a single experience.',
              'Enabled market-specific workflows with tenant-aware routing and flexible schema evolution.',
            ],
          },
          {
            title: 'What I did',
            items: [
              'Led domain modeling, service decomposition, and front-end information architecture.',
              'Established CQRS patterns, event sourcing strategy, and governance for integrating partner teams.',
            ],
          },
        ],
        stack: ['Java', 'TypeScript', 'MySQL', 'CQRS', 'Micro Frontends'],
        actions: [
          { label: 'Experience Overview', variant: 'outline', href: '/experience' },
        ],
      },
      {
        image: { src: '/placeholder.svg?height=400&width=600', alt: 'Map and geospatial data pipeline illustration' },
        badge: { label: 'Geo Platforms', class: 'bg-primary/10 text-primary' },
        title: 'Jarvis Crowdsourcing Platform',
        subtitle: 'Grab',
        description:
          'Crowdsourced geospatial data engine fueling Grab’s mobility and delivery products. Coordinates contributor tasks, validates submissions, and feeds downstream routing services.',
        sections: [
          {
            title: 'Impact',
            items: [
              'Scaled to 300K tasks and 400K+ geospatial data points that improved map freshness and trip accuracy.',
              'Cut geospatial storage costs by 70% via data simplification and tiered retention policies.',
            ],
          },
          {
            title: 'What I did',
            items: [
              'Designed task lifecycle, worker incentives, and auditing capabilities across data, ops, and product teams.',
              'Implemented high-performance services in Go, PostGIS, and Kafka with proactive monitoring and alerting.',
            ],
          },
        ],
        stack: ['Go', 'PostgreSQL', 'PostGIS', 'Kafka', 'ElasticSearch'],
        actions: [
          { label: 'Experience Overview', variant: 'outline', href: '/experience' },
        ],
      },
    ],
    other: {
      title: 'Other Projects',
      description: 'Additional initiatives that strengthened observability, experimentation, and developer velocity.',
      cards: [
        {
          image: { src: '/placeholder.svg?height=200&width=350', alt: 'Streaming logs visualization' },
          title: 'Centralized Logging Pipeline',
          description: 'Benthos + Kafka + AWS SQS pipeline processing 50K+ logs/day into OpenSearch, cutting MTTR by 25% and unlocking proactive alerting.',
          tags: ['Benthos', 'Kafka', 'AWS SQS', 'OpenSearch'],
        },
        {
          image: { src: '/placeholder.svg?height=200&width=350', alt: 'Experiment dashboard mockup' },
          title: 'Darwin Experimentation Platform',
          description: 'Re-architected experimentation APIs and SDKs at Ant Group to support 1,000+ annual experiments and drive a 2% conversion lift.',
          tags: ['Java', 'SDK', 'Experimentation'],
        },
        {
          image: { src: '/placeholder.svg?height=200&width=350', alt: 'Street-view map tiles' },
          title: 'KartaView Street-View Service',
          description: 'High-performance PostGIS service applying the Douglas–Peucker algorithm to shrink geospatial datasets by 70% for faster queries.',
          tags: ['Go', 'PostGIS', 'Microservices'],
        },
      ],
    },
  },
  zh: {
    hero: {
      prefix: '我的',
      highlight: '项目',
      suffix: '',
      description: '来自餐饮外卖、出行与金融科技平台的真实案例，展示我如何落地自动化、数据与实验平台。',
    },
    featured: [
      {
        image: { src: '/placeholder.svg?height=400&width=600', alt: '客服编排架构图' },
        badge: { label: '运营自动化', class: 'bg-primary/10 text-primary' },
        title: 'Help Experience 编排层',
        subtitle: 'Just Eat Takeaway',
        description:
          '为 JET 客服聊天机器人打造的事件驱动编排，引导服务、状态与知识库协作，让订单问题无需人工介入即可闭环。',
        sections: [
          {
            title: '业务成效',
            items: [
              '让数百万次客户咨询实现自动化处理，人工介入率下降 60%。',
              '通过稳健的重试、状态管理与可观测性设计，显著提升平台稳定性与恢复速度。',
            ],
          },
          {
            title: '我的工作',
            items: [
              '主导架构设计、API 约定与跨团队上线计划，协调产品、运营与支持团队。',
              '将运营手册沉淀为可复用的工作流与策略，保证流程可实验、可治理。',
            ],
          },
        ],
        stack: ['Java', 'Spring Boot', 'Kafka', 'AWS SQS', 'Redis'],
        actions: [
          { label: '查看经历', variant: 'outline', href: '/zh/experience' },
        ],
      },
      {
        image: { src: '/placeholder.svg?height=400&width=600', alt: 'JETMS 平台界面' },
        badge: { label: '平台工程', class: 'bg-accent/10 text-accent' },
        title: 'JETMS 运营平台',
        subtitle: 'Just Eat Takeaway',
        description:
          '一个多租户工作台，将 20+ 内部工具整合到统一界面。借助 CQRS 路由、共享数据模型与权限设计，帮助客服聚焦问题解决。',
        sections: [
          {
            title: '业务成效',
            items: [
              '工具整合后，工单解决 SLA 缩短约 33%。',
              '支持多市场差异化流程，灵活演进数据模型与路由规则。',
            ],
          },
          {
            title: '我的工作',
            items: [
              '负责领域建模、服务拆分以及前端信息架构。',
              '制定 CQRS 与事件建模规范，并推动多团队接入治理。',
            ],
          },
        ],
        stack: ['Java', 'TypeScript', 'MySQL', 'CQRS', 'Micro Frontends'],
        actions: [
          { label: '查看经历', variant: 'outline', href: '/zh/experience' },
        ],
      },
      {
        image: { src: '/placeholder.svg?height=400&width=600', alt: '众包地理数据流程图' },
        badge: { label: '地理平台', class: 'bg-primary/10 text-primary' },
        title: 'Jarvis 众包数据平台',
        subtitle: 'Grab',
        description:
          '为 Grab 出行与配送业务提供的众包地理数据引擎，负责任务分发、数据校验与下游服务回流。',
        sections: [
          {
            title: '业务成效',
            items: [
              '平台扩展至 30 万任务、40 万+ 地理数据点，显著提升地图实时性。',
              '通过 Douglas–Peucker 与分层存储策略，地理数据体积下降 70%。',
            ],
          },
          {
            title: '我的工作',
            items: [
              '设计任务生命周期、激励体系与审核流程，衔接数据、运营与产品团队。',
              '以 Go、PostGIS、Kafka 实现高性能服务，并搭建监控告警体系。',
            ],
          },
        ],
        stack: ['Go', 'PostgreSQL', 'PostGIS', 'Kafka', 'ElasticSearch'],
        actions: [
          { label: '查看经历', variant: 'outline', href: '/zh/experience' },
        ],
      },
    ],
    other: {
      title: '更多实践',
      description: '围绕可观测性、实验平台与工程效率的补充案例。',
      cards: [
        {
          image: { src: '/placeholder.svg?height=200&width=350', alt: '日志流处理示意图' },
          title: '集中式日志管道',
          description: '基于 Benthos、Kafka 与 AWS SQS 的日志流水线，日处理 5 万+ 日志，接入 OpenSearch 后 MTTR 降低 25%。',
          tags: ['Benthos', 'Kafka', 'AWS SQS', 'OpenSearch'],
        },
        {
          image: { src: '/placeholder.svg?height=200&width=350', alt: '实验平台界面' },
          title: 'Darwin 实验平台',
          description: '在蚂蚁集团重构实验 API 与 SDK，支持每年 1000+ 实验并带来 2% 转化提升。',
          tags: ['Java', 'SDK', 'Experimentation'],
        },
        {
          image: { src: '/placeholder.svg?height=200&width=350', alt: '街景地图瓦片' },
          title: 'KartaView 街景服务',
          description: '结合 Go 与 PostGIS 构建的街景微服务，通过 Douglas–Peucker 算法让地理数据压缩 70%，查询更高效。',
          tags: ['Go', 'PostGIS', 'Microservices'],
        },
      ],
    },
  },
} as const;

const copy = translations[lang] ?? translations.en;

const actionClassMap = {
  primary:
    'inline-flex items-center rounded-md bg-primary px-4 py-2 text-sm font-semibold text-primary-foreground shadow-sm transition-colors hover:bg-primary/90',
  outline:
    'inline-flex items-center rounded-md border border-input bg-background px-4 py-2 text-sm font-semibold text-foreground shadow-sm transition-colors hover:bg-accent hover:text-accent-foreground',
} as const;
---

<BaseLayout 
  title="Projects - My Portfolio"
  description="Explore my full-stack development projects featuring Java backend systems, modern web applications, and cloud-native solutions."
>
  <Header />
  
  <main class="flex-1">
    <!-- Hero Section -->
    <section class="section-padding bg-gradient-to-br from-background via-muted/20 to-background">
      <div class="container-width text-center">
        <h1 class="text-4xl font-bold tracking-tight text-foreground sm:text-5xl lg:text-6xl mb-6">
          {copy.hero.prefix}
          {copy.hero.prefix ? ' ' : ''}
          <span class="gradient-text">{copy.hero.highlight}</span>
          {copy.hero.suffix ? ` ${copy.hero.suffix}` : ''}
        </h1>
        <p class="mx-auto max-w-2xl text-lg leading-8 text-muted-foreground sm:text-xl">
          {copy.hero.description}
        </p>
      </div>
    </section>

    <!-- Featured Projects -->
    <section class="section-padding">
      <div class="container-width">
        <div class="space-y-24">
          {copy.featured.map((project, index) => (
            <div class="grid gap-12 items-center lg:grid-cols-2 lg:gap-16">
              <div class={index % 2 === 0 ? 'order-2 lg:order-1' : 'order-2 lg:order-1'}>
                <div class={`inline-flex items-center rounded-full px-3 py-1 text-sm font-medium mb-4 ${project.badge.class}`}>
                  {project.badge.label}
                </div>
                <h2 class="text-3xl font-bold tracking-tight text-foreground sm:text-4xl mb-4">
                  {project.title}
                </h2>
                <p class="text-lg text-muted-foreground mb-6 leading-relaxed">
                  {project.description}
                </p>
                <div class="space-y-4 mb-6">
                  {project.sections.map((section) => (
                    <div>
                      <h3 class="font-semibold text-foreground mb-2">{section.title}:</h3>
                      <ul class="text-muted-foreground space-y-1 text-sm">
                        {section.items.map((item) => (
                          <li>• {item}</li>
                        ))}
                      </ul>
                    </div>
                  ))}
                </div>
                <div class="flex flex-wrap gap-2 mb-6">
                  {project.stack.map((tech) => (
                    <span class="inline-flex items-center rounded-full bg-primary/10 px-3 py-1 text-sm font-medium text-primary">{tech}</span>
                  ))}
                </div>
                {project.actions && project.actions.length > 0 && (
                  <div class="flex gap-4 flex-wrap">
                    {project.actions.map((action) => (
                      <a href={action.href ?? '#'} class={actionClassMap[action.variant]}>
                        {action.label}
                      </a>
                    ))}
                  </div>
                )}
              </div>
              <div class={index % 2 === 0 ? 'order-1 lg:order-2' : 'order-1 lg:order-2'}>
                <div class="aspect-video rounded-xl bg-muted overflow-hidden shadow-2xl">
                  <OptimizedImage
                    src={project.image.src}
                    alt={project.image.alt}
                    width={600}
                    height={400}
                    class="h-full w-full object-cover"
                    loading="lazy"
                  />
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </section>

    <!-- Other Projects Grid -->
    <section class="section-padding bg-muted/30">
      <div class="container-width">
        <div class="text-center mb-16">
          <h2 class="text-3xl font-bold tracking-tight text-foreground sm:text-4xl mb-4">
            {copy.other.title}
          </h2>
          <p class="text-lg text-muted-foreground max-w-2xl mx-auto">
            {copy.other.description}
          </p>
        </div>

        <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
          {copy.other.cards.map((card) => (
            <div class="rounded-xl border bg-card p-6 shadow-sm transition-all duration-200 hover:shadow-md">
              <div class="aspect-video rounded-lg bg-muted mb-4 overflow-hidden">
                <OptimizedImage
                  src={card.image.src}
                  alt={card.image.alt}
                  width={350}
                  height={200}
                  class="h-full w-full object-cover"
                  loading="lazy"
                />
              </div>
              <h3 class="text-xl font-semibold text-card-foreground mb-2">{card.title}</h3>
              <p class="text-muted-foreground text-sm mb-4">
                {card.description}
              </p>
              <div class="flex flex-wrap gap-2 mb-4">
                {card.tags.map((tag) => (
                  <span class="inline-flex items-center rounded-full bg-secondary px-2 py-1 text-xs font-medium text-secondary-foreground">{tag}</span>
                ))}
              </div>
              <a href="#" class="text-primary hover:text-accent font-medium text-sm transition-colors">
                {lang === 'zh' ? '查看项目 →' : 'View Project →'}
              </a>
            </div>
          ))}
        </div>
      </div>
    </section>
  </main>
  
  <Footer />
</BaseLayout>
