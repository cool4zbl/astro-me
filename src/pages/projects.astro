---
import BaseLayout from '../layouts/BaseLayout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import OptimizedImage from '../components/OptimizedImage.astro';
import { getLangFromUrl, type Language } from '../i18n/config';

const lang: Language = Astro.props?.lang ?? getLangFromUrl(Astro.url);

const translations = {
  en: {
    hero: {
      prefix: 'My',
      highlight: 'Projects',
      suffix: '',
      description:
        'A collection of full-stack applications, backend systems, and cloud solutions that showcase my expertise in Java development and modern web technologies.',
    },
    featured: [
      {
        image: { src: '/placeholder.svg?height=400&width=600', alt: 'E-commerce Platform Screenshot' },
        badge: { label: 'Featured Project', class: 'bg-primary/10 text-primary' },
        title: 'E-commerce Platform',
        subtitle: '',
        description:
          'A comprehensive e-commerce solution built with Spring Boot and React. Features include user authentication, product catalog management, shopping cart functionality, payment processing with Stripe, and an admin dashboard for order management.',
        sections: [
          {
            title: 'Key Features',
            items: [
              'JWT-based authentication and authorization',
              'RESTful API with comprehensive error handling',
              'Real-time inventory management',
              'Secure payment processing integration',
              'Responsive admin dashboard',
            ],
          },
        ],
        stack: ['Spring Boot', 'React', 'PostgreSQL', 'Redis', 'Docker'],
        actions: [
          { label: 'Live Demo', variant: 'primary' },
          { label: 'GitHub', variant: 'outline' },
        ],
      },
      {
        image: { src: '/placeholder.svg?height=400&width=600', alt: 'Microservices Architecture Diagram' },
        badge: { label: 'Backend Focus', class: 'bg-accent/10 text-accent' },
        title: 'Microservices API Gateway',
        subtitle: '',
        description:
          'A scalable microservices architecture built with Spring Cloud, featuring service discovery, load balancing, circuit breakers, and distributed tracing. Deployed on Kubernetes with automated CI/CD pipelines.',
        sections: [
          {
            title: 'Architecture Highlights',
            items: [
              'Spring Cloud Gateway for API routing',
              'Eureka service discovery and registration',
              'Hystrix circuit breaker pattern',
              'Zipkin distributed tracing',
              'Kubernetes deployment with Helm charts',
            ],
          },
        ],
        stack: ['Spring Cloud', 'Kubernetes', 'Docker', 'MongoDB', 'RabbitMQ'],
        actions: [
          { label: 'View Code', variant: 'outline' },
          { label: 'Documentation', variant: 'outline' },
        ],
      },
      {
        image: { src: '/placeholder.svg?height=400&width=600', alt: 'Analytics Dashboard Screenshot' },
        badge: { label: 'Real-time System', class: 'bg-primary/10 text-primary' },
        title: 'Analytics Dashboard',
        subtitle: '',
        description:
          'A real-time analytics platform built with Spring WebFlux for reactive programming. Features live data streaming, interactive charts, and customizable dashboards with sub-second latency for business intelligence.',
        sections: [
          {
            title: 'Technical Features',
            items: [
              'Reactive streams with WebFlux and WebSocket',
              'Redis for real-time data caching',
              'Interactive charts with Chart.js and D3.js',
              'Custom dashboard builder interface',
              'Export capabilities (PDF, Excel, CSV)',
            ],
          },
        ],
        stack: ['Spring WebFlux', 'Redis', 'WebSocket', 'Chart.js', 'Vue.js'],
        actions: [
          { label: 'Live Demo', variant: 'primary' },
          { label: 'Source Code', variant: 'outline' },
        ],
      },
    ],
    other: {
      title: 'Other Projects',
      description: 'Additional projects showcasing various technologies and problem-solving approaches.',
      cards: [
        {
          image: { src: '/placeholder.svg?height=200&width=350', alt: 'Task Management App' },
          title: 'Task Management API',
          description: 'RESTful API for task management with team collaboration features, built with Spring Boot and JWT authentication.',
          tags: ['Spring Boot', 'MySQL', 'JWT'],
        },
        {
          image: { src: '/placeholder.svg?height=200&width=350', alt: 'Real-time Chat App' },
          title: 'Real-time Chat App',
          description: 'WebSocket-based chat application with rooms, file sharing, and message history using Spring Boot and React.',
          tags: ['WebSocket', 'React', 'MongoDB'],
        },
        {
          image: { src: '/placeholder.svg?height=200&width=350', alt: 'Inventory System' },
          title: 'Inventory Management',
          description: 'Enterprise inventory management system with barcode scanning, reporting, and multi-location support.',
          tags: ['Spring MVC', 'Thymeleaf', 'PostgreSQL'],
        },
      ],
    },
  },
  zh: {
    hero: {
      prefix: '我的',
      highlight: '项目',
      suffix: '',
      description: '这里是我做过的全栈应用、后端系统与云端解决方案，展现我在 Java 开发与现代 Web 技术上的实践经验。',
    },
    featured: [
      {
        image: { src: '/placeholder.svg?height=400&width=600', alt: '电商平台界面截图' },
        badge: { label: '重点项目', class: 'bg-primary/10 text-primary' },
        title: '电商平台',
        subtitle: '',
        description:
          '基于 Spring Boot 与 React 构建的电商系统，支持用户登录、商品管理、购物车、Stripe 支付，以及订单管理后台。',
        sections: [
          {
            title: '核心功能',
            items: [
              'JWT 鉴权与角色权限管理',
              '完善的 RESTful API 错误处理机制',
              '库存实时同步与提醒',
              '安全稳定的支付流程集成',
              '自适应的后台运营界面',
            ],
          },
        ],
        stack: ['Spring Boot', 'React', 'PostgreSQL', 'Redis', 'Docker'],
        actions: [
          { label: '线上演示', variant: 'primary' },
          { label: 'GitHub', variant: 'outline' },
        ],
      },
      {
        image: { src: '/placeholder.svg?height=400&width=600', alt: '微服务架构图示' },
        badge: { label: '后端专注', class: 'bg-accent/10 text-accent' },
        title: '微服务 API 网关',
        subtitle: '',
        description:
          '使用 Spring Cloud 构建的可扩展微服务架构，具备服务发现、负载均衡、断路器与链路追踪能力，并通过 Kubernetes 与 CI/CD 实现自动化部署。',
        sections: [
          {
            title: '架构亮点',
            items: [
              'Spring Cloud Gateway 负责统一路由',
              'Eureka 实现服务注册与发现',
              'Hystrix 断路器保护核心服务',
              'Zipkin 追踪链路性能',
              '结合 Helm 的 Kubernetes 部署方案',
            ],
          },
        ],
        stack: ['Spring Cloud', 'Kubernetes', 'Docker', 'MongoDB', 'RabbitMQ'],
        actions: [
          { label: '查看代码', variant: 'outline' },
          { label: '技术文档', variant: 'outline' },
        ],
      },
      {
        image: { src: '/placeholder.svg?height=400&width=600', alt: '实时分析看板截图' },
        badge: { label: '实时系统', class: 'bg-primary/10 text-primary' },
        title: '实时分析看板',
        subtitle: '',
        description:
          '借助 Spring WebFlux 打造的实时数据分析平台，支持数据流、交互式图表以及可自定义的仪表盘，帮助业务快速洞察。',
        sections: [
          {
            title: '技术特性',
            items: [
              'WebFlux + WebSocket 实现响应式数据流',
              'Redis 作为实时缓存层',
              'Chart.js / D3.js 绘制动态图表',
              '自定义仪表盘编辑体验',
              '支持导出 PDF、Excel、CSV 等格式',
            ],
          },
        ],
        stack: ['Spring WebFlux', 'Redis', 'WebSocket', 'Chart.js', 'Vue.js'],
        actions: [
          { label: '在线演示', variant: 'primary' },
          { label: '源代码', variant: 'outline' },
        ],
      },
    ],
    other: {
      title: '更多项目',
      description: '还有一些项目展示了我在不同场景下的工程实践与解决问题的方式。',
      cards: [
        {
          image: { src: '/placeholder.svg?height=200&width=350', alt: '任务管理应用界面' },
          title: '任务管理 API',
          description: '面向团队协作的任务管理 RESTful API，支持多角色、标签管理与 JWT 鉴权。',
          tags: ['Spring Boot', 'MySQL', 'JWT'],
        },
        {
          image: { src: '/placeholder.svg?height=200&width=350', alt: '实时聊天应用界面' },
          title: '实时聊天应用',
          description: '基于 WebSocket 的实时聊天系统，支持房间、文件传输与消息历史记录，后端使用 Spring Boot。',
          tags: ['WebSocket', 'React', 'MongoDB'],
        },
        {
          image: { src: '/placeholder.svg?height=200&width=350', alt: '库存管理系统界面' },
          title: '库存管理系统',
          description: '企业级库存管理平台，支持条码扫描、报表分析与多仓库协同。',
          tags: ['Spring MVC', 'Thymeleaf', 'PostgreSQL'],
        },
      ],
    },
  },
} as const;

const copy = translations[lang] ?? translations.en;

const actionClassMap = {
  primary:
    'inline-flex items-center rounded-md bg-primary px-4 py-2 text-sm font-semibold text-primary-foreground shadow-sm transition-colors hover:bg-primary/90',
  outline:
    'inline-flex items-center rounded-md border border-input bg-background px-4 py-2 text-sm font-semibold text-foreground shadow-sm transition-colors hover:bg-accent hover:text-accent-foreground',
} as const;
---

<BaseLayout 
  title="Projects - My Portfolio"
  description="Explore my full-stack development projects featuring Java backend systems, modern web applications, and cloud-native solutions."
>
  <Header />
  
  <main class="flex-1">
    <!-- Hero Section -->
    <section class="section-padding bg-gradient-to-br from-background via-muted/20 to-background">
      <div class="container-width text-center">
        <h1 class="text-4xl font-bold tracking-tight text-foreground sm:text-5xl lg:text-6xl mb-6">
          {copy.hero.prefix}
          {copy.hero.prefix ? ' ' : ''}
          <span class="gradient-text">{copy.hero.highlight}</span>
          {copy.hero.suffix ? ` ${copy.hero.suffix}` : ''}
        </h1>
        <p class="mx-auto max-w-2xl text-lg leading-8 text-muted-foreground sm:text-xl">
          {copy.hero.description}
        </p>
      </div>
    </section>

    <!-- Featured Projects -->
    <section class="section-padding">
      <div class="container-width">
        <div class="space-y-24">
          {copy.featured.map((project, index) => (
            <div class="grid gap-12 items-center lg:grid-cols-2 lg:gap-16">
              <div class={index % 2 === 0 ? 'order-2 lg:order-1' : 'order-2 lg:order-1'}>
                <div class={`inline-flex items-center rounded-full px-3 py-1 text-sm font-medium mb-4 ${project.badge.class}`}>
                  {project.badge.label}
                </div>
                <h2 class="text-3xl font-bold tracking-tight text-foreground sm:text-4xl mb-4">
                  {project.title}
                </h2>
                <p class="text-lg text-muted-foreground mb-6 leading-relaxed">
                  {project.description}
                </p>
                <div class="space-y-4 mb-6">
                  {project.sections.map((section) => (
                    <div>
                      <h3 class="font-semibold text-foreground mb-2">{section.title}:</h3>
                      <ul class="text-muted-foreground space-y-1 text-sm">
                        {section.items.map((item) => (
                          <li>• {item}</li>
                        ))}
                      </ul>
                    </div>
                  ))}
                </div>
                <div class="flex flex-wrap gap-2 mb-6">
                  {project.stack.map((tech) => (
                    <span class="inline-flex items-center rounded-full bg-primary/10 px-3 py-1 text-sm font-medium text-primary">{tech}</span>
                  ))}
                </div>
                <div class="flex gap-4 flex-wrap">
                  {project.actions.map((action) => (
                    <a href="#" class={actionClassMap[action.variant]}>
                      {action.label}
                    </a>
                  ))}
                </div>
              </div>
              <div class={index % 2 === 0 ? 'order-1 lg:order-2' : 'order-1 lg:order-2'}>
                <div class="aspect-video rounded-xl bg-muted overflow-hidden shadow-2xl">
                  <OptimizedImage
                    src={project.image.src}
                    alt={project.image.alt}
                    width={600}
                    height={400}
                    class="h-full w-full object-cover"
                    loading="lazy"
                  />
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </section>

    <!-- Other Projects Grid -->
    <section class="section-padding bg-muted/30">
      <div class="container-width">
        <div class="text-center mb-16">
          <h2 class="text-3xl font-bold tracking-tight text-foreground sm:text-4xl mb-4">
            {copy.other.title}
          </h2>
          <p class="text-lg text-muted-foreground max-w-2xl mx-auto">
            {copy.other.description}
          </p>
        </div>

        <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
          {copy.other.cards.map((card) => (
            <div class="rounded-xl border bg-card p-6 shadow-sm transition-all duration-200 hover:shadow-md">
              <div class="aspect-video rounded-lg bg-muted mb-4 overflow-hidden">
                <OptimizedImage
                  src={card.image.src}
                  alt={card.image.alt}
                  width={350}
                  height={200}
                  class="h-full w-full object-cover"
                  loading="lazy"
                />
              </div>
              <h3 class="text-xl font-semibold text-card-foreground mb-2">{card.title}</h3>
              <p class="text-muted-foreground text-sm mb-4">
                {card.description}
              </p>
              <div class="flex flex-wrap gap-2 mb-4">
                {card.tags.map((tag) => (
                  <span class="inline-flex items-center rounded-full bg-secondary px-2 py-1 text-xs font-medium text-secondary-foreground">{tag}</span>
                ))}
              </div>
              <a href="#" class="text-primary hover:text-accent font-medium text-sm transition-colors">
                {lang === 'zh' ? '查看项目 →' : 'View Project →'}
              </a>
            </div>
          ))}
        </div>
      </div>
    </section>
  </main>
  
  <Footer />
</BaseLayout>
